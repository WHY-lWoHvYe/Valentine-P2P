/*
 * This file was generated by the Gradle 'init' task.
 */
import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'com.lwohvye.java-conventions'
    id 'extra-java-module-info' // apply my own plugin written in buildSrc
    id 'signing'
//    id 'org.springframework.boot'
}

//configurations {
//    compileOnly {
//        extendsFrom annotationProcessor
//    }
//}

description = '系统核心模块'

java {
    withJavadocJar()
    // 这个要放到dependencies之前
    registerFeature('log4jdbc') {
        usingSourceSet(sourceSets.main)
    }
}

jar {
    enabled = true // separates boot jar from normal jar
    manifest {
        from sharedManifest
        attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Automatic-Module-Name": "lwohvye." + project.name.replace("-", ".")
        )
    }
    into("META-INF/maven/$project.group/$project.name") {
        from { generatePomFileForMavenPublication }
        rename ".*", "pom.xml"
    }
}

dependencies {
    api platform(SpringBootPlugin.BOM_COORDINATES)
    api 'org.springframework.boot:spring-boot-starter-data-jpa'
    api('org.springframework.boot:spring-boot-starter-web') {
        // 括号里是Groovy的语法，定义map
        exclude(group: 'org.springframework.boot', module: "spring-boot-starter-tomcat")
    }
    api 'org.springframework.boot:spring-boot-starter-undertow'
    api 'org.springframework.boot:spring-boot-starter-security'
    api 'org.springframework.boot:spring-boot-starter-amqp'
    api 'org.springframework.boot:spring-boot-starter-cache'
    api 'org.springframework.boot:spring-boot-starter-data-redis'
    api 'org.springframework.boot:spring-boot-configuration-processor'
    api "org.redisson:redisson-spring-boot-starter:$redissonVersion"
    api 'org.apache.commons:commons-pool2'
    api 'org.apache.commons:commons-lang3'
    api "org.springdoc:springdoc-openapi-starter-webmvc-ui:$springdocVersion"
    api "cn.hutool:hutool-all:$hutoolVersion"
    api "net.dreamlu:mica-ip2region:$ip2regionVersion"
    api "org.apache.poi:poi:$poiVersion"
    api "org.apache.poi:poi-ooxml:$poiVersion"
    implementation "xerces:xercesImpl:$xercesVersion"
    api "org.mapstruct:mapstruct:$mapstructVersion"
    api "org.mapstruct.extensions.spring:mapstruct-spring-extensions:$mapstructSpringVersion"
    api 'org.hibernate.validator:hibernate-validator'
    api "nl.basjes.parse.useragent:yauaa:$yauaaVersion"
    api 'com.github.ben-manes.caffeine:caffeine'
    implementation "net.logstash.logback:logstash-logback-encoder:$logstashVersion"
    api "net.coobird:thumbnailator:$thumbnailatorVersion"
    api 'org.jetbrains:annotations:23.0.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    compileOnlyApi "org.projectlombok:lombok:${lombokVersion}"
    compileOnlyApi "org.mapstruct:mapstruct-processor:$mapstructVersion"
    runtimeOnly 'com.mysql:mysql-connector-j'
    log4jdbcRuntimeOnly "com.lwohvye.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:$log4jdbcVersion"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:$mapstructVersion"
}

// TODO: 2022/9/1 这个无法传递，就很不好
extraJavaModuleInfo {
    // This does not have to be a complete description (e.g. here 'org.apache.commons.collections' does not export anything here).
    // It only needs to be good enough to work in the context of this application we are building.
/*    module('commons-beanutils-1.9.4.jar', 'org.apache.commons.beanutils', '1.9.4') {
        exports('org.apache.commons.beanutils')

        requires('org.apache.commons.logging')
        requires('java.sql')
        requires('java.desktop')
    }
    module('commons-cli-1.4.jar', 'org.apache.commons.cli', '3.2.2') {
        exports('org.apache.commons.cli')
    }
    module('commons-collections-3.2.2.jar', 'org.apache.commons.collections', '3.2.2')
    automaticModule('commons-logging-1.2.jar', 'org.apache.commons.logging')*/
    automaticModule("hutool-all-${hutoolVersion}.jar", 'cn.hutool')
    automaticModule("mapstruct-spring-extensions-${mapstructSpringVersion}.jar", 'org.mapstruct.extensions.spring')
    automaticModule("redisson-${redissonVersion}.jar", 'org.redisson')
    automaticModule("thumbnailator-${thumbnailatorVersion}.jar", 'net.coobird.thumbnailator')
}

tasks.named('compileJava') {
    options.javaModuleVersion = provider { project.version }
}

