/*
 * This file was generated by the Gradle 'init' task.
 */
pluginManagement {
    repositories {
        gradlePluginPortal()
    }
}

plugins {
    id 'com.gradle.enterprise' version '3.13.2'
}

rootProject.name = 'valentine-p2p'

def buildFiles = fileTree(rootDir) {
    def excludes = gradle.startParameter.projectProperties.get("excludeProjects")?.split(",")
    include "**/*.gradle", "**/*.gradle.kts"
    exclude "build", "**/gradle", "settings.gradle", "buildSrc", "/build.gradle", ".*", "out"
    // 可以这样exclude指定的module
    def kotlinVersion = gradle.properties.getOrDefault("kotlinVersion", "1.8.20").toString()
    if (kotlinVersion.matches("^1\\.8\\.2[0-9]+\$")) // current version is not support Java 20
        exclude "valentine-starter"
    if (excludes) {
        exclude excludes
    }
}

buildFiles.forEach { buildFile ->
    def isDefaultName = buildFile.name == "build.gradle" || buildFile.name == "build.gradle.kts"
    def isKotlin = buildFile.name.endsWith ".kts"
    if (isDefaultName) {
        def buildFilePath = buildFile.parentFile.absolutePath
        def projectPath = buildFilePath.replace((String) rootDir.absolutePath, "").replace(File.separator, ":")
        include projectPath
    } else {
        def projectName
        if (isKotlin) {
            projectName = buildFile.name.replace(".gradle.kts", "")
        } else {
            projectName = buildFile.name.replace(".gradle", "")
        }


        def projectPath = ":$projectName"
        include projectPath

        def project = findProject(projectPath)
        project.name = projectName
        project.projectDir = buildFile.parentFile
        project.buildFileName = buildFile.name
    }
}

gradleEnterprise {
    def runsOnCI = providers.environmentVariable("CI").getOrElse("false").toBoolean()
    if (runsOnCI) {
        buildScan {
            publishAlways()
            termsOfServiceUrl = "https://gradle.com/terms-of-service"
            termsOfServiceAgree = "yes"
        }
    }
}
