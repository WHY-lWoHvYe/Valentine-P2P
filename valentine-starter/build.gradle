plugins {
    id 'com.lwohvye.java-conventions'
    id 'org.gradlex.extra-java-module-info'
    id 'org.springframework.boot' // 通过引入这个，使该subModule有了相关的Task
    id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
}

dependencies {
    implementation project(':unicorn-security')
    implementation project(':unicorn-logging')
    implementation project(':unicorn-tp-tools')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinxCoroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$kotlinxCoroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk9:$kotlinxCoroutinesVersion"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    compileOnlyApi "org.projectlombok:lombok:${lombokVersion}"
    compileOnlyApi "org.mapstruct:mapstruct-processor:$mapstructVersion"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    implementation(project(':unicorn-security')) {
        capabilities {
            requireCapability('com.lwohvye:unicorn-security-captcha')
        }
    }
    implementation(project(':unicorn-security')) {
        capabilities {
            // 这里只支撑横线，不支持驼峰
            requireCapability('com.lwohvye:unicorn-security-business-log')
        }
    }
}

extraJavaModuleInfo {
    failOnMissingModuleInfo.set(false)
    automaticModule("io.github.mouzt:bizlog-sdk", 'bizlog.sdk')
    automaticModule("com.github.whvcse:easy-captcha", 'easy.captcha')
    automaticModule("ch.ethz.ganymed:ganymed-ssh2", 'ganymed.ssh2')
    automaticModule("cn.hutool:hutool-all", 'hutool.all')
    automaticModule("io.jsonwebtoken:jjwt-api", 'jjwt.api')
    automaticModule("io.jsonwebtoken:jjwt-impl", 'jjwt.impl')
    automaticModule("io.jsonwebtoken:jjwt-jackson", 'jjwt.jackson')
    automaticModule("com.jcraft:jsch", 'jsch')
    automaticModule("org.quartz-scheduler:quartz", 'quartz')
    automaticModule("org.redisson:redisson", 'redisson')
    automaticModule("org.springframework.retry:spring-retry", 'spring.retry')
    automaticModule("net.coobird:thumbnailator", 'thumbnailator')
    automaticModule("org.jetbrains.kotlin:kotlin-stdlib-common", 'kotlin.stdlib.common')
    automaticModule("org.jetbrains.kotlinx:kotlinx-coroutines-core", 'kotlinx.coroutines.core')
    automaticModule("org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm", 'kotlinx.coroutines.core.jvm')
    automaticModule("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8", 'kotlinx.coroutines.jdk8')
    automaticModule("org.jetbrains.kotlinx:kotlinx-coroutines-jdk9", 'kotlinx.coroutines.jdk9')
    automaticModule("org.jetbrains.kotlinx:kotlinx-coroutines-reactive", 'kotlinx.coroutines.reactive')
    module('org.eclipse.angus:jakarta.mail', 'jakarta.mail', '1.0.0') {
        uses('jakarta.mail.util.StreamProvider')
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named("bootBuildImage") {
    environment = [
            "BP_JVM_VERSION"              : "19",
            "BPE_DELIM_JAVA_TOOL_OPTIONS" : " ",
            "BPE_APPEND_JAVA_TOOL_OPTIONS": "-XX:+UseZGC --enable-preview"
    ]
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "19"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "19"
    }
}
