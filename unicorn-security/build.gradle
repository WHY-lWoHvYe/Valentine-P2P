/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'com.lwohvye.java-conventions'
    id 'org.gradlex.extra-java-module-info'
    id 'signing'
}

description = '权限管理模块'

java {
    withJavadocJar()
    registerFeature('captcha') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('businessLog') {
        usingSourceSet(sourceSets.main)
    }
}

jar {
    enabled = true // separates boot jar from normal jar
    manifest {
        from sharedManifest
        attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Automatic-Module-Name": "lwohvye." + project.name.replace("-", ".")
        )
    }
    into("META-INF/maven/$project.group/$project.name") {
        from { generatePomFileForMavenJavaSecurityPublication }
        rename ".*", "pom.xml"
    }
}

publishing {
    publications {
        mavenJavaSecurity(MavenPublication) {
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJavaSecurity
}

dependencies {
    api project(':unicorn-sys-api')
    api('org.springframework.boot:spring-boot-starter-websocket')
    api "io.jsonwebtoken:jjwt-api:$jjwtVersion"
    api "io.jsonwebtoken:jjwt-impl:$jjwtVersion"
    api "io.jsonwebtoken:jjwt-jackson:$jjwtVersion"
    api "org.quartz-scheduler:quartz:$quartzVersion"
    api "com.github.whvcse:easy-captcha:$easyCaptchaVersion"
    captchaImplementation "com.lwohvye.captcha:captcha-spring-boot-starter:$captchaVersion"
    api "ch.ethz.ganymed:ganymed-ssh2:262"
    api 'com.jcraft:jsch:0.1.55'
    api "com.github.oshi:oshi-core:$oshiCoreVersion"
    api "ch.qos.logback:logback-access:$logbackVersion"
    api 'org.openjdk.jol:jol-core:0.16'
    // It seems that xxxImplementation will work on runtimeClasspath for the customers while xxxApi compileClasspath
    businessLogApi "io.github.mouzt:bizlog-sdk:$bizlogVersion"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:$mapstructVersion"
    annotationProcessor "org.mapstruct.extensions.spring:mapstruct-spring-extensions:${mapstructSpringExtensionsVersion}"
}

extraJavaModuleInfo {
    failOnMissingModuleInfo.set(false)
    automaticModule("io.github.mouzt:bizlog-sdk", 'bizlog.sdk')
    automaticModule("com.github.whvcse:easy-captcha", 'easy.captcha')
    automaticModule("ch.ethz.ganymed:ganymed-ssh2", 'ganymed.ssh2')
    automaticModule("cn.hutool:hutool-all", 'hutool.all')
    automaticModule("io.jsonwebtoken:jjwt-api", 'jjwt.api')
    automaticModule("io.jsonwebtoken:jjwt-impl", 'jjwt.impl')
    automaticModule("io.jsonwebtoken:jjwt-jackson", 'jjwt.jackson')
    automaticModule("com.jcraft:jsch", 'jsch')
    automaticModule("org.quartz-scheduler:quartz", 'quartz')
    automaticModule("org.redisson:redisson", 'redisson')
    automaticModule("org.springframework.retry:spring-retry", 'spring.retry')
    automaticModule("net.coobird:thumbnailator", 'thumbnailator')
}
